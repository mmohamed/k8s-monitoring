pipeline {
   agent {
       label  'east'
   }

   tools {
      nodejs "AutoNode"
   }
 
   stages {
      stage('Build') {
         steps {
            //checkout
            checkout([$class: 'GitSCM',
                branches: [[name: '*/dev']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'SubmoduleOption',
                              disableSubmodules: false,
                              parentCredentials: false,
                              recursiveSubmodules: true,
                              reference: '',
                              trackingSubmodules: false]], 
                submoduleCfg: [], 
                userRemoteConfigs: [[url: 'https://github.com/mmohamed/k8s-monitoring.git']]])
            // Package
            sh 'cd webapp/src/main/app'
            sh 'export NODE_OPTIONS="--max_old_space_size=256"'
            sh 'export REACT_APP_URL_BASE="https://api-monitoring.medinvention.dev/k8s"'
            sh 'export PATH=$PATH:$NODEJS_HOME/bin'
            sh 'cd webapp/src/main/app && npm install && npm run-script build'
         }
      }


      stage('Prepare Workspace'){
         steps{
            // Prepare Docker workspace
            withCredentials([sshUserPrivateKey(credentialsId: "SSHMaster", keyFileVariable: 'keyfile')]) {
                sh "ssh -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} pirate@192.168.1.86 'mkdir -p ~/s2i-k8S/k8s-monitoring-$BUILD_NUMBER/target'"
                sh "scp -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} -r ./webapp/src/main/app/build/* pirate@192.168.1.86:/home/pirate/s2i-k8S/k8s-monitoring-$BUILD_NUMBER/target"
            }

            // copy docker file
            withCredentials([sshUserPrivateKey(credentialsId: "SSHMaster", keyFileVariable: 'keyfile')]) {
                sh "scp -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} k8s/Dockerfile.front pirate@192.168.1.86:/home/pirate/s2i-k8S/k8s-monitoring-$BUILD_NUMBER"
                sh "scp -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} k8s/nginx.conf pirate@192.168.1.86:/home/pirate/s2i-k8S/k8s-monitoring-$BUILD_NUMBER"
            }
         }
      }

      stage('Docker build'){
         steps{
            withCredentials([sshUserPrivateKey(credentialsId: "SSHMaster", keyFileVariable: 'keyfile')]) {
               sh "ssh -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} pirate@192.168.1.86 'docker build ~/s2i-k8S/k8s-monitoring-$BUILD_NUMBER -f ~/s2i-k8S/k8s-monitoring-$BUILD_NUMBER/Dockerfile.front -t medinvention/k8s-monitoring-front:arm'"
               sh "ssh -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} pirate@192.168.1.86 'docker push medinvention/k8s-monitoring-front:arm'"
               sh "ssh -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${keyfile} pirate@192.168.1.86 'docker rmi medinvention/k8s-monitoring-front:arm'"
            }
         }
      }

      stage('Kubernetes deploy'){
         steps{
            // deploy
            withCredentials([string(credentialsId: 'KubeToken', variable: 'TOKEN'),
                  string(credentialsId: 'TLSKey', variable: 'KEY'),
                  string(credentialsId: 'TLSCrt', variable: 'CRT')
               ]) {
               sh "export TOKEN=$TOKEN && export CRT=$CRT && export KEY=$KEY"
               sh "cd k8s && COLLECTORTOKEN='securitytoken' sh deploy-front.sh"
            }  
         }
      }
   }
}